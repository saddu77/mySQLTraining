MySQL DataBase:  Structured Query Language
===============
		Need of DataBase?
		File System 

		Library Management:
		Search: beginning<- Good
			mid <- Average
			end<- poor

		Feasible Soultion:
					Organize or Structure or Design

		Instantly

		Set Up:
		-------

			version: Server version: 8.0.33 MySQL Community Server - GPL
		

			DataBase
			Table
			Records or Data 

			demoDB
			users
			     id email password 
			to list all databases : show databases;
			Lets create a new database: create database demoDB;
						    USE demodb;
						    SELECT DATABASE() FROM DUAL;
							Dual ia one row,one-col built in table in Oracle Database.

						    Create Table users(id int,email varchar(50),password varchar(50));
							1  john@gmail.com  john123
			

			Syntax: create table table_name;
			example: users
			task:  products

							Select * from users;

							insert into users(id,email,password) values(1,"alex@gmail.com","123456");

						Create Query
						Read Query
						Update Query 
								Update table_name 
								set col_name = 'new value'
								where col_name = 'existing unique value';

								update users
								set id = 4
								where email = "dolly@gmail.com";


								CRUD Operations: Create,Read,Update,Delete
						Task:
						Create a New Database : productsDB;
						Create a new table :    products;
									id,name,qty,price,brand
									Enter at least 10 products and perform different queries with where clause.
							     Primary Key and AUTO Increment:

			     create table products (id INT AUTO_INCREMENT PRIMARY KEY,name varchar(50),qty int,price varchar(50));

			     Adding multiple records:
				insert into products(name,qty,price) values ("Tab",3,"15000"),("LCD",5,"27000");

			     Adding new column to a existing Table:
				ALTER TABLE users ADD phone varchar(50);

			     Alter Table Name:
				 ALTER TABLE users RENAME login;
			
				ALTER TABLE users MODIFY COLUMN id INT AUTO_INCREMENT PRIMARY KEY;

			     Truncate: when we just want to remove records or table data not the table structure.
				  truncate table users;
			     Drop: Drop removes the table completely along with the structure.
				 drop table products;

			    Unique:
				create table brands(id int,brand varchar(50) UNIQUE,code int);
				ALTER TABLE brands MODIFY COLUMN code int UNIQUE;


				Creating Database,Altering DataBase
			Creating Tables with Auto Increment,Primary Key,Unique
			Inserting Records into a Table.
			Perform Search Query [Where clause-and -or ]
				select * from customer where cname = "syed" and phone = "7816958209";
				select * from customer where cname = "john" and phone = "7816958209";
				select * from customer where cname = "john" or phone = "7816958209";

			Deleting Records[Drop and Truncate]

			MySQL Server: 8.0.33
			username: root
			password: admin
			port: 3306
			host: localhost or 127.0.0.1

			To export DB:
				locate mysqldump command in Program Files\MySQL-New\MySQL Server 8.0\bin.
				Open a command prompt and execute:
				mysqldump -u root -p crmcb > crmbackup.sql

				create a  new database with the name erpdb;
			To Import DB:
				mysql -u root -p erpdb < crmbackup.sql

			Example:
				Existing Database: crmdb
				It SHould be : customerDB
			=========================================================================================
			Where clause with AND and OR:
		
			select * FROM customer WHERE (cname = 'syed' AND email='sadakhath07@gmail.com') OR (id=3);	
			select * FROM customer WHERE (cname = 'syed' AND email='sadakhath7@gmail.com') OR (id=3);
			==========================================================================================
			
			Distinct: Is used to remove duplicate records from the table and fetch only the Unique Records.
				   Its used only with SELECT statement.
				  select DISTINCT cname,phone,email from customer;
			==========================================================================================
			Order By:
                                 Used to sort  the records in ascending or descending order.
				select * from customer where location = 'Delhi' ORDER BY cname;
				select * from customer where location = 'Delhi' ORDER BY cname desc;

				select * from customer where location = 'Delhi' ORDER BY id;
				select * from customer where location = 'Delhi' ORDER BY id desc;
		
				Using Both ASC and DESC:
				select * from customer where id < 6 ORDER BY cname DESC ,location ASC;
			===========================================================================================

			Group By:
				used to collect data from multiple records and group the result by one or more column.

			===========================================================================================
			Orders : o_id,o_date,o_status
			Customer : c_id,c_name,c_email,c_phone,c_location
			product : p_id,p_name,p_qty
			
			===========================================================================================
			Tasks: Perfom Create,Read,Update and Delete Operation .
				Every Table shoould have 10 records
			============================================================================================
			===========================================================================================

			Primary Key: id
			===========
				
				Unique
				Not Be NULL or empty
					
				AUTO_INCREMENT
					
				CREATE TABLE Employee(
				emp_id INT AUTO_INCREMENT PRIMARY KEY,
				emp_name VARCHAR(50),
				emp_age int);

				create table products (id int,p_name varchar(50),p_qty int,p_price long);
				desc products;
				ALTER TABLE products ADD PRIMARY KEY(id);
				desc products;
				ALTER TABLE products DROP PRIMARY KEY;
				desc products;


			Foreign Key:
			============
	     CREATE TABLE billing (b_id int,bill_no int,bill_amount float,c_id int, CONSTRAINT fk_customer FOREIGN KEY(c_id) REFERENCES customer(id));	


			Tasks:
			======
				Passenger 
						: p_id Primary key Not null
						: p_name
						: p_age
						: p_gender
						: p_phone
						: p_email

				Train
						: t_id Primary key Not null 
						: train_no
						: train_name
						: source
						: destination
						: date
						: start_time
						: end_time		



				Ticket
						:ticket_id
						:journey_date
						:price
						:p_id  [References Passenger Table p_id]
						:t-id  [References Train Table t_id]
					
			
		
			

		
